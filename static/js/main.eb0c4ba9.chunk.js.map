{"version":3,"sources":["ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ToDoList","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addTask","trim","todolistId","className","title","onClick","removeTodolist","value","onChange","event","currentTarget","onKeyPress","key","task","map","t","id","isDone","type","e","ChangeIsDone","checked","removeTasks","filter","changeFilter","App","taskId","tasks","find","setTask","filteredTask","tittle","newTitle","v1","newTasks","finishTask","filtered","todolist","setTodolist","todolists","todolistId1","todolistId2","taskForToDoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.eb0c4ba9.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {FilterValuesType} from \"./App\";\n\n\nexport type TaskType = {\n    id: string,\n    title: string,\n    isDone: boolean\n\n}\n\ntype PropsType = {\n    title: string,\n    task: Array<TaskType> //TaskType[], the same thing\n    removeTasks: (id: string, todolistId: string) => void\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    ChangeIsDone: (taskId: string, isDone: boolean, todolistId: string) => void\n    filter: FilterValuesType\n    todolistId: string\n    removeTodolist: (todolistId: string) => void\n}\n\n\nexport function ToDoList(props: PropsType) {\n    let [newTaskTitle, setNewTaskTitle] = useState('')\n    let [error, setError] = useState<string | null>(null)\n\n    const addTask = () => {\n        if (newTaskTitle.trim() !== '') {\n            props.addTask(newTaskTitle.trim(), props.todolistId)\n            setNewTaskTitle(\"\")\n            // setNewTaskTitle(newTaskTitle)\n        } else {\n            setError(\"Title is required\")\n        }\n    }\n\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n        setError(null)\n        if (event.key === 'Enter') {\n            addTask()\n            setNewTaskTitle('')\n        }\n    }\n    const onChangeCurrentTarget = ((event: ChangeEvent<HTMLInputElement>) => {\n        setNewTaskTitle(event.currentTarget.value)\n    })\n\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.todolistId)\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.todolistId)\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.todolistId)\n    const deleteTitlehandler = () => {\n        props.removeTodolist(props.todolistId)\n    }\n    return (\n        <div className=\"App\">\n            <div>\n                <h3>{props.title}\n                    <button onClick={deleteTitlehandler}>x</button>\n                </h3>\n                <div>\n                    <input value={newTaskTitle} className={error ? \"error\" : \"\"} onChange={onChangeCurrentTarget}\n                           onKeyPress={onKeyPressHandler}\n                    />\n                    <button onClick={addTask}>+</button>\n                    {error && <div className={\"errorMessage\"}>{error}</div>}\n                </div>\n                <ul>\n                    {\n                        props.task.map((t) => {\n                            const onChangeIsDoneHandler = (e: ChangeEvent<HTMLInputElement>) => {\n                                props.ChangeIsDone(t.id, e.currentTarget.checked, props.todolistId)\n                            }\n                            const deleteTask = () => {\n                                props.removeTasks(t.id, props.todolistId)\n                            }\n\n                            return <li key={t.id} className={t.isDone ? \"isDone\" : \"\"}><input type=\"checkbox\"\n                                                                                              onChange={onChangeIsDoneHandler}\n                                                                                              checked={t.isDone}/>\n                                <span className={\"span\"}>{t.title}</span>\n                                <button onClick={deleteTask}>x</button>\n                            </li>;\n                        })\n                    }\n                    {/*<li><input type=\"checkbox\" checked={props.task[0].isDone}/> <span>{props.task[0].title}</span></li>*/}\n                    {/*<li><input type=\"checkbox\" checked={props.task[1].isDone}/> <span>{props.task[1].title}</span></li>*/}\n                    {/*<li><input type=\"checkbox\" checked={props.task[2].isDone}/> <span>{props.task[2].title}</span></li>*/}\n                </ul>\n                <div>\n                    <button className={props.filter === \"all\" ? \"activeFilter\" : \"\"}\n                            onClick={onAllClickHandler}>All\n                    </button>\n                    <button className={props.filter === \"active\" ? \"activeFilter\" : \"\"}\n                            onClick={onActiveClickHandler}>Active\n                    </button>\n                    <button className={props.filter === \"completed\" ? \"activeFilter\" : \"\"}\n                            onClick={onCompletedClickHandler}>Completed\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, ToDoList} from \"./ToDoList\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\n// let task2: Array<TaskType> = [\r\n//     {id: 1, title: \"A1\", isDone: true},\r\n//     {id: 2, title: \"B1\", isDone: true},\r\n//     {id: 3, title: \"C1\", isDone: false},\r\n//     {id: 3, title: \"C2\", isDone: false}\r\n// ]\r\n\r\ntype todolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n    // let initTask: Array<TaskType> = [\r\n    //     {id: 1, title: \"HTML&CSS\", isDone: true},\r\n    //     {id: 2, title: \"JS\", isDone: true},\r\n    //     {id: 3, title: \"React\", isDone: false},\r\n    //     {id: 4, title: \"Redux\", isDone: false}\r\n    // ]\r\n    // let [task, setTask] = useState<Array<TaskType>>([\r\n    //     {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n    //     {id: v1(), title: \"JS\", isDone: true},\r\n    //     {id: v1(), title: \"React\", isDone: false},\r\n    //     {id: v1(), title: \"Redux\", isDone: false}]);\r\n    // let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n\r\n    const ChangeIsDone = (taskId: string, isDone: boolean, todolistId: string) => {\r\n\r\n        let tasks = task[todolistId].find(t => t.id === taskId)\r\n        if (tasks) {\r\n            tasks.isDone = isDone\r\n        }\r\n        setTask({...task})\r\n    }\r\n\r\n\r\n    function removeTasks(id: string, todolistId: string) {\r\n        let taskObj = task[todolistId]\r\n        let filteredTask = taskObj.filter((t) => t.id !== id)\r\n        task[todolistId] = filteredTask;\r\n        setTask({...task});\r\n    }\r\n\r\n    function addTask(tittle: string, todolistId: string) {\r\n        let newTitle = {id: v1(), title: tittle, isDone: false}\r\n        let newTasks = task[todolistId]\r\n        let finishTask = [newTitle, ...newTasks]\r\n        task[todolistId] = finishTask\r\n        setTask({...task})\r\n\r\n    }\r\n\r\n    function removeTodolist (todolistId: string) {\r\n        let filtered =  todolist.filter(t => t.id !== todolistId)\r\n        if (filtered) {\r\n            setTodolist(filtered)\r\n        }\r\n\r\n        delete task[todolistId]\r\n        setTask({...task})\r\n\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolists = todolist.find(t => t.id === todolistId);\r\n        if (todolists) {\r\n            todolists.filter = value\r\n            setTodolist([...todolist])\r\n        }\r\n    }\r\n\r\n    const todolistId1 = v1();\r\n    const todolistId2 = v1();\r\n\r\n    let [todolist, setTodolist] = useState<Array<todolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"completed\"}\r\n    ])\r\n\r\n    let [task, setTask] = useState({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"book\", isDone: true},\r\n            {id: v1(), title: \"car\", isDone: true}\r\n        ]\r\n\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolist.map(t => {\r\n                let taskForToDoList = task[t.id];\r\n                if (t.filter === \"completed\") {\r\n                    taskForToDoList = task[t.id].filter(t => t.isDone)\r\n                }\r\n                if (t.filter === \"active\") {\r\n                    taskForToDoList = task[t.id].filter(t => !t.isDone)\r\n                }\r\n\r\n                return (\r\n                    <ToDoList\r\n                        key={t.id}\r\n                        todolistId={t.id}\r\n                        title={t.title}\r\n                        task={taskForToDoList}\r\n                        removeTasks={removeTasks}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        ChangeIsDone={ChangeIsDone}\r\n                        filter={t.filter}\r\n                        removeTodolist={removeTodolist}\r\n                    />\r\n                )\r\n            })}\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}