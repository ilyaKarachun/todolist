{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addTask","trim","addItem","TextField","variant","label","value","className","onChange","event","currentTarget","onKeyPress","key","IconButton","onClick","NoteAdd","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","e","autoFocus","onDoubleClick","ToDoList","changeTodolistTitleHandler","todolistId","aria-label","removeTodolist","task","map","t","id","isDone","Checkbox","ChangeIsDone","checked","changeTaskTitleStatus","removeTasks","size","fontSize","Button","filter","changeFilter","color","App","taskId","tasks","find","setTask","filteredTask","tittle","newTitle","v1","newTasks","finishTask","filtered","todolist","setTodolist","todolists","todolistId1","todolistId2","newTask","todolistTasks","Box","sx","flexGrow","AppBar","position","Toolbar","edge","mr","Typography","component","Container","Grid","container","style","padding","newTodolist","spacing","taskForToDoList","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e7fc3a43.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, IconButton, TextField} from \"@mui/material\";\nimport {NoteAdd} from \"@mui/icons-material\";\n\n\ntype addItemFormPropsType = {\n    addItem: (title: string) => void\n\n}\n\nexport function AddItemForm(props: addItemFormPropsType) {\n\n    let [newTaskTitle, setNewTaskTitle] = useState('');\n    let [error, setError] = useState<string | null>(null);\n    const onChangeCurrentTarget = ((event: ChangeEvent<HTMLInputElement>) => {\n        setNewTaskTitle(event.currentTarget.value)\n    })\n\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n        setError(null)\n        if (event.key === 'Enter') {\n            addTask()\n            setNewTaskTitle('')\n        }\n    }\n\n    const addTask = () => {\n        if (newTaskTitle.trim() !== '') {\n            props.addItem(newTaskTitle.trim())\n            setNewTaskTitle(\"\")\n            // setNewTaskTitle(newTaskTitle)\n        } else {\n            setError(\"Title is required\")\n        }\n    }\n    return <div>\n        <TextField variant=\"outlined\" label={\"type value\"} value={newTaskTitle}\n                   className={error ? \"error\" : \"\"}\n                   onChange={onChangeCurrentTarget}\n                   onKeyPress={onKeyPressHandler}\n                   error={!!error}\n        />\n        {/*<input value={newTaskTitle}*/}\n        {/*       className={error ? \"error\" : \"\"}*/}\n        {/*       onChange={onChangeCurrentTarget}*/}\n        {/*       onKeyPress={onKeyPressHandler}*/}\n        {/*/>*/}\n        {/*<button onClick={addTask}>+</button>*/}\n        <IconButton onClick={addTask}>\n            <NoteAdd/>\n        </IconButton>\n        {error && <div className={\"errorMessage\"}>{error}</div>}\n    </div>\n\n}","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@mui/material\";\n\ntype EditableSpanTypeProps = {\n    title: string\n    onChange: (value: string) => void\n}\n\nexport function EditableSpan(props: EditableSpanTypeProps) {\n    let[editMode, setEditMode] = useState(false)\n    let[title, setTitle] = useState(\"\") // can be like props.title\n\n    const editModeActivateHandler = () => {\n        setEditMode(true)\n        setTitle(props.title)\n    }\n    const editModeDeActivateHandler = () =>{\n        setEditMode(false)\n        props.onChange(title)\n    }\n    const inputOnChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n    return editMode\n        ? <TextField variant={\"standard\"} onBlur={editModeDeActivateHandler} onChange={inputOnChangeHandler} value={title} autoFocus/>\n        : <span onDoubleClick={editModeActivateHandler} className={\"span\"}>{props.title}</span>\n}","import React, {ChangeEvent} from \"react\";\nimport {FilterValuesType} from \"./App\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Button, Checkbox, IconButton} from \"@mui/material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\n\n\nexport type TaskType = {\n    id: string,\n    title: string,\n    isDone: boolean\n\n}\n\ntype PropsType = {\n    title: string,\n    task: Array<TaskType> //TaskType[], the same thing\n    removeTasks: (id: string, todolistId: string) => void\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    ChangeIsDone: (taskId: string, isDone: boolean, todolistId: string) => void\n    filter: FilterValuesType\n    todolistId: string\n    removeTodolist: (todolistId: string) => void\n    changeTaskTitleStatus: (id: string, value: string, todolistId: string) => void\n    changeTodolistTitleHandler: (title: string, id: string) => void\n}\n\n\nexport function ToDoList(props: PropsType) {\n    // let [newTaskTitle, setNewTaskTitle] = useState('')\n    // let [error, setError] = useState<string | null>(null)\n\n    // const addTask = () => {\n    //     if (newTaskTitle.trim() !== '') {\n    //         props.addTask(newTaskTitle.trim(), props.todolistId)\n    //         setNewTaskTitle(\"\")\n    //         // setNewTaskTitle(newTaskTitle)\n    //     } else {\n    //         setError(\"Title is required\")\n    //     }\n    // }\n\n    // const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n    //     setError(null)\n    //     if (event.key === 'Enter') {\n    //         addTask()\n    //         setNewTaskTitle('')\n    //     }\n    // }\n    // const onChangeCurrentTarget = ((event: ChangeEvent<HTMLInputElement>) => {\n    //     setNewTaskTitle(event.currentTarget.value)\n    // })\n\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.todolistId)\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.todolistId)\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.todolistId)\n    const deleteTitlehandler = () => {\n        props.removeTodolist(props.todolistId)\n    }\n    const addTask = (title: string) => {\n        props.addTask(title, props.todolistId)\n    }\n\n    const changeTodolistTitleHandler = (title: string) => {\n        props.changeTodolistTitleHandler(title, props.todolistId)\n    }\n    return (\n        <div className=\"AppTodolist\">\n\n            <h3><EditableSpan title={props.title} onChange={changeTodolistTitleHandler}/>\n                {/*<button onClick={deleteTitlehandler}>x</button>*/}\n                <IconButton\n                    aria-label=\"delete\"\n                    onClick={deleteTitlehandler}\n                >\n                    <DeleteIcon />\n                </IconButton>\n            </h3>\n            {/*<div>*/}\n            {/*    <input value={newTaskTitle} className={error ? \"error\" : \"\"} onChange={onChangeCurrentTarget}*/}\n            {/*           onKeyPress={onKeyPressHandler}*/}\n            {/*    />*/}\n            {/*    <button onClick={addTask}>+</button>*/}\n            {/*    {error && <div className={\"errorMessage\"}>{error}</div>}*/}\n            <AddItemForm addItem={addTask}/>\n            <div>\n                {\n                    props.task.map((t) => {\n                        const onChangeIsDoneHandler = (e: ChangeEvent<HTMLInputElement>) => {\n                            props.ChangeIsDone(t.id, e.currentTarget.checked, props.todolistId)\n                        }\n                        const onChangeTitleHandler = (value: string) => {\n                            props.changeTaskTitleStatus(t.id, value, props.todolistId)\n                        }\n                        const deleteTask = () => {\n                            props.removeTasks(t.id, props.todolistId)\n                        }\n\n                        return <div key={t.id} className={t.isDone ? \"isDone\" : \"\"}><Checkbox\n                                                                                          onChange={onChangeIsDoneHandler}\n                                                                                          checked={t.isDone}/>\n                            {/*<span className={\"span\"}>{t.title}</span>*/}\n                            <EditableSpan title={t.title}\n                                          onChange={onChangeTitleHandler}/>\n                            {/*<button onClick={deleteTask}>x</button>*/}\n                            <IconButton onClick={deleteTask} aria-label=\"delete\" size=\"small\">\n                                <DeleteIcon fontSize=\"small\" />\n                            </IconButton>\n                        </div>;\n                    })\n                }\n                {/*<li><input type=\"checkbox\" checked={props.task[0].isDone}/> <span>{props.task[0].title}</span></li>*/}\n                {/*<li><input type=\"checkbox\" checked={props.task[1].isDone}/> <span>{props.task[1].title}</span></li>*/}\n                {/*<li><input type=\"checkbox\" checked={props.task[2].isDone}/> <span>{props.task[2].title}</span></li>*/}\n            </div>\n            <div>\n                <Button variant={props.filter === \"all\" ? \"contained\" : \"text\"}\n                        // className={props.filter === \"all\" ? \"activeFilter\" : \"\"}\n                        onClick={onAllClickHandler}\n                >All\n                </Button>\n                <Button variant={props.filter === \"active\" ? \"contained\" : \"text\"}\n                        color={\"primary\"}\n                        // className={props.filter === \"active\" ? \"activeFilter\" : \"\"}\n                        onClick={onActiveClickHandler}\n                >Active\n                </Button>\n                <Button variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\n                        color={\"secondary\"}\n                        // className={props.filter === \"completed\" ? \"activeFilter\" : \"\"}\n                        onClick={onCompletedClickHandler}\n                >Completed\n                </Button>\n            </div>\n        </div>\n\n    );\n}\n\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, ToDoList} from \"./ToDoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Box, Button, Container, Grid, IconButton, Paper, Typography} from \"@mui/material\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Toolbar from '@mui/material/Toolbar';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\n// let task2: Array<TaskType> = [\r\n//     {id: 1, title: \"A1\", isDone: true},\r\n//     {id: 2, title: \"B1\", isDone: true},\r\n//     {id: 3, title: \"C1\", isDone: false},\r\n//     {id: 3, title: \"C2\", isDone: false}\r\n// ]\r\n\r\ntype todolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype StateTaskType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    // let initTask: Array<TaskType> = [\r\n    //     {id: 1, title: \"HTML&CSS\", isDone: true},\r\n    //     {id: 2, title: \"JS\", isDone: true},\r\n    //     {id: 3, title: \"React\", isDone: false},\r\n    //     {id: 4, title: \"Redux\", isDone: false}\r\n    // ]\r\n    // let [task, setTask] = useState<Array<TaskType>>([\r\n    //     {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n    //     {id: v1(), title: \"JS\", isDone: true},\r\n    //     {id: v1(), title: \"React\", isDone: false},\r\n    //     {id: v1(), title: \"Redux\", isDone: false}]);\r\n    // let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n\r\n    const ChangeIsDone = (taskId: string, isDone: boolean, todolistId: string) => {\r\n\r\n        let tasks = task[todolistId].find(t => t.id === taskId)\r\n        if (tasks) {\r\n            tasks.isDone = isDone\r\n        }\r\n        setTask({...task})\r\n    }\r\n\r\n\r\n    function removeTasks(id: string, todolistId: string) {\r\n        let taskObj = task[todolistId]\r\n        let filteredTask = taskObj.filter((t) => t.id !== id)\r\n        task[todolistId] = filteredTask;\r\n        setTask({...task});\r\n    }\r\n\r\n    function addTask(tittle: string, todolistId: string) {\r\n        let newTitle = {id: v1(), title: tittle, isDone: false}\r\n        let newTasks = task[todolistId]\r\n        let finishTask = [newTitle, ...newTasks]\r\n        task[todolistId] = finishTask\r\n        setTask({...task})\r\n\r\n    }\r\n\r\n    function removeTodolist(todolistId: string) {\r\n        let filtered = todolist.filter(t => t.id !== todolistId)\r\n        if (filtered) {\r\n            setTodolist(filtered)\r\n        }\r\n\r\n        delete task[todolistId]\r\n        setTask({...task})\r\n\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolists = todolist.find(t => t.id === todolistId);\r\n        if (todolists) {\r\n            todolists.filter = value\r\n            setTodolist([...todolist])\r\n        }\r\n    }\r\n\r\n    const todolistId1 = v1();\r\n    const todolistId2 = v1();\r\n\r\n    let [todolist, setTodolist] = useState<Array<todolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"completed\"}\r\n    ])\r\n\r\n    let [task, setTask] = useState<StateTaskType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"book\", isDone: true},\r\n            {id: v1(), title: \"car\", isDone: true}\r\n        ]\r\n\r\n    })\r\n\r\n    function AddTodolist(title: string) {\r\n        let newTodolist: todolistType = {\r\n            id: v1(),\r\n            title,\r\n            filter: \"all\"\r\n        }\r\n        setTodolist([newTodolist, ...todolist])\r\n        setTask({\r\n            ...task,\r\n            [newTodolist.id]: []\r\n        })\r\n    }\r\n\r\n    const changeTaskTitleStatus = (id: string, value: string, todolistId: string) => {\r\n        let todolistTasks = task[todolistId];\r\n        let newTask = todolistTasks.find(t => t.id === id)\r\n        if (newTask) {\r\n            newTask.title = value\r\n            setTask({...task})\r\n        }\r\n    }\r\n\r\n    const changeTodolistTitleHandler = (title: string, todolistId: string) => {\r\n        const todolistTasks = todolist.find(t => t.id === todolistId)\r\n\r\n        if (todolistTasks) {\r\n            todolistTasks.title = title\r\n            setTodolist([...todolist])\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <Box sx={{flexGrow: 1}}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            sx={{mr: 2}}\r\n                        >\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                            News\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Box>\r\n            <Container>\r\n                <Grid container style={ {padding: \"10px\"} }>\r\n                    <AddItemForm addItem={AddTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolist.map(t => {\r\n                        let taskForToDoList = task[t.id];\r\n                        if (t.filter === \"completed\") {\r\n                            taskForToDoList = task[t.id].filter(t => t.isDone)\r\n                        }\r\n                        if (t.filter === \"active\") {\r\n                            taskForToDoList = task[t.id].filter(t => !t.isDone)\r\n                        }\r\n\r\n                        return (\r\n                            <Grid item>\r\n                                <Paper elevation={3} style={ {padding: '10px'} }>\r\n                                    <ToDoList\r\n                                        key={t.id}\r\n                                        todolistId={t.id}\r\n                                        title={t.title}\r\n                                        task={taskForToDoList}\r\n                                        removeTasks={removeTasks}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        ChangeIsDone={ChangeIsDone}\r\n                                        filter={t.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitleStatus={changeTaskTitleStatus}\r\n                                        changeTodolistTitleHandler={changeTodolistTitleHandler}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}